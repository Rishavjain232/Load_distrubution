#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb  7 11:47:54 2018

@author: prince
"""

from pandas import read_csv
from pandas import datetime
from matplotlib import pyplot
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error
import numpy
from math import sqrt
import matplotlib.dates as mdates


#ye teen chise update karni pari mere ko
import inspect
import os
import xml.etree.ElementTree as et
#

base_path=( os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))))
#print(base_path) yaha se mere ko hum jis directory main curently hai uska path mil gya
xml_file=os.path.join(base_path,"\\datacenters.xml")
#print(xml_file) yaha par hum iss current python file ko and xml file jispe humko kaam karna hai ko join kar diye
e = xml.etree.ElementTree.parse('datacenters.xml') #doubt->yaha pta nhi kyo xml_file dalne se error aa raha tha aur jab direct file ka naam daal diya to sahi hai y??
root=e.getroot() #root mai xml ka root tag aa gya

a=[21,32,43,54]  #example hai jisse humko list ka value badalna hai
i=0
for child in root: #root hai entry element then uske andr bht sare bache honge here child usse ko bta raha hai
    for element in child: #aab child k bhi bht sare bache honge,element uss chis ko bta raha hai
        if(element.tag=='greenEnergy'): #now ssince humko greenenergy badlna tha to hum search kiye ki element ka tag jab greenEnergy ho thn
                element.text=str(a[i]) # change the value with our above taken example
                i=i+1                   #upar str(a[i]) jo likhe hai wo isliye kyoki xml m har chis string ki tarah hee jata hai agar aise hee update kare to while writing back it is showing error that it is not serializable
#now when i m seeing whther it is changing or not				
for child in root:
    for element in child:
        if(element.tag=='greenEnergy'):
            print(element.tag,":",element.text)
#it is changing here now to reflect back in xml file 
#just write simple command
e.write("datacenters.xml")
 #isse update ho jayegi xml file ka greenEnergy tag
 
 


print(datetime.now)
def parser(a,b,c,d):
    return datetime.strptime('%s %s %s %s' % (a, b, c, d),'%Y %j %H %M')

slot=1440

series = read_csv('sample.csv', header=0, parse_dates=[[0,1,2,3]],index_col=0, date_parser=parser)
X = series.values
#size = int(len(X) * 0.75)
#size = 87840-1440
size = 89280-1440
area1=1*(10**4)
efficiency=0.15

train, test = X[0:size], X[size:len(X)]
history = [x for x in train]
predictions = list()

# create a differenced series
def difference(dataset, interval=slot):
	diff = list()
	for i in range(interval, len(dataset)):
		value = dataset[i] - dataset[i - slot]
		diff.append(value)
	return numpy.array(diff)

# invert differenced value
def inverse_difference(history, yhat, interval=slot):
	return yhat + history[-interval]


differenced=difference(X)

model = ARIMA(differenced, order=(7,1,0))
model_fit = model.fit(disp=0)
forecast = model_fit.forecast(steps=slot)[0]

predarr=[]
sum60=0
min=1
for yhat in forecast:
    inverted = inverse_difference(history, yhat)
    sum60+=inverted
    print("test cnt=%d " % (min))
#        output = model_fit.forecast()
#        yhat=output[0]
    predictions.append(inverted)
    obs=test[min-1]
#        history.append(obs)
    history.append(obs)
    print('predicted=%f, expected=%f' % (inverted, obs))
    if min%60==0:
        avg60=sum60/60
        if avg60<0:
            predarr.append([0])
        else:
            predarr.append(avg60)
        sum60=0
    min+=1
#    t+=1

min=1
print('\npredicted energy for the day, every hour:')
hourly=[]
for x in predarr:
    hourly_energy= x[0]*area1*efficiency/1000
    hourly.append(hourly_energy)
    print ("Energy per meter square: {}".format(x[0]))
    print ("Mean energy generated by the plant at Hour {}: {}".format(min,hourly_energy))
    min+=1
print()
error = mean_squared_error(test, predictions)
mse = sqrt(error)
print('Test MSE: %.3f, RMSE: %.3f' % (error,mse))

# plot
xfmt = mdates.DateFormatter('%d-%m-%y %H:%M')
fig, ax = pyplot.subplots(1)

pyplot.plot(series.index.values[size:len(X)],test)
pyplot.plot(series.index.values[size:len(X)],predictions, color='red')
fig.autofmt_xdate()
pyplot.xlabel('Date & Time',fontsize=20)
pyplot.ylabel('Irradiance (W/m^2)',fontsize=20)
ax.xaxis.set_major_formatter(xfmt)
pyplot.show()

abcd=numpy.arange(1,25)
pyplot.plot(abcd,hourly)
pyplot.xlabel('Energy Generated (kWh)',fontsize=20)
pyplot.ylabel('Hours of the Day',fontsize=20)








